#!/bin/bash
# Automated tmux Setup Script for iPhone SSH Access
# Creates a persistent, mobile-friendly tmux environment

set -e

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${BLUE}ðŸ“± tmux Mobile Setup Script${NC}"
echo "============================"

# 1. Install tmux
echo -e "\n${YELLOW}Installing tmux...${NC}"
if ! command -v tmux &> /dev/null; then
    sudo apt update
    sudo apt install tmux -y
    echo -e "${GREEN}âœ“ tmux installed successfully${NC}"
else
    echo -e "${GREEN}âœ“ tmux already installed ($(tmux -V))${NC}"
fi

# 2. Create optimized tmux configuration
echo -e "\n${YELLOW}Creating mobile-optimized tmux configuration...${NC}"
cat > ~/.tmux.conf << 'EOF'
# Mobile-optimized tmux configuration
# Generated by tmux-setup.sh

# Enable mouse support (essential for mobile)
set -g mouse on

# Increase scrollback buffer
set -g history-limit 10000

# Better prefix key for mobile (Ctrl+a instead of Ctrl+b)
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix

# Status bar customization
set -g status-bg colour235
set -g status-fg white
set -g status-interval 1
set -g status-left-length 30
set -g status-left '#[fg=green]#S #[fg=white]| #[fg=yellow]#(whoami) '
set -g status-right '#[fg=cyan]%H:%M:%S #[fg=white]| #[fg=green]%d-%b-%y '

# Window status
setw -g window-status-format " #I: #W "
setw -g window-status-current-format " #I: #W "
setw -g window-status-current-style fg=yellow,bold

# Easy window splitting
bind | split-window -h
bind - split-window -v
unbind '"'
unbind %

# Easy pane navigation
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# Quick window switching
bind -n C-n next-window
bind -n C-p previous-window

# Reload configuration
bind r source-file ~/.tmux.conf \; display-message "Config reloaded!"

# Don't rename windows automatically
set-option -g allow-rename off

# Activity monitoring
setw -g monitor-activity on
set -g visual-activity on

# Vi mode for copy
setw -g mode-keys vi

# Prevent accidental detach
bind-key d confirm-before -p "Detach from session? (y/n)" detach

# Longer display time for messages
set -g display-time 2000

# Start windows and panes at 1, not 0
set -g base-index 1
setw -g pane-base-index 1

# Renumber windows when one is closed
set -g renumber-windows on

# Set terminal title
set -g set-titles on
set -g set-titles-string '#S - #W'

# Aggressive resize
setw -g aggressive-resize on
EOF

echo -e "${GREEN}âœ“ tmux configuration created${NC}"

# 3. Create useful aliases
echo -e "\n${YELLOW}Adding mobile-friendly aliases...${NC}"
cat >> ~/.bashrc << 'EOF'

# tmux mobile aliases
alias t='tmux'
alias tl='tmux ls'
alias tn='tmux new -s'
alias ta='tmux attach -t'
alias tk='tmux kill-session -t'
alias tka='tmux kill-server'

# Quick session aliases
alias vibe='tmux attach -t vibe 2>/dev/null || tmux new -s vibe'
alias dev='tmux attach -t dev 2>/dev/null || tmux new -s dev'
alias ops='tmux attach -t ops 2>/dev/null || tmux new -s ops'

# Session management
alias tsave='~/.tmux/plugins/tmux-resurrect/scripts/save.sh'
alias trestore='~/.tmux/plugins/tmux-resurrect/scripts/restore.sh'

# Auto-attach function
tmux_auto() {
    if [[ -n "$SSH_CLIENT" ]] && [[ -z "$TMUX" ]]; then
        # List existing sessions
        sessions=$(tmux ls 2>/dev/null | cut -d: -f1)
        if [[ -n "$sessions" ]]; then
            echo "Existing tmux sessions:"
            echo "$sessions"
            echo ""
            read -p "Attach to session (or press Enter for new): " session_name
            if [[ -n "$session_name" ]]; then
                tmux attach -t "$session_name"
            else
                tmux new -s "mobile-$(date +%s)"
            fi
        else
            tmux new -s vibe
        fi
    fi
}

# Optional: Enable auto-attach on SSH login
# Uncomment the line below to auto-attach
# tmux_auto
EOF

# 4. Create session management scripts
echo -e "\n${YELLOW}Creating session management scripts...${NC}"

# Quick session script
cat > ~/tmux-quick.sh << 'EOF'
#!/bin/bash
# Quick tmux session manager

SESSION="${1:-vibe}"
ACTION="${2:-attach}"

case "$ACTION" in
    "new")
        tmux new -s "$SESSION"
        ;;
    "attach"|"a")
        tmux attach -t "$SESSION" 2>/dev/null || tmux new -s "$SESSION"
        ;;
    "kill"|"k")
        tmux kill-session -t "$SESSION"
        ;;
    "list"|"ls")
        tmux ls
        ;;
    *)
        echo "Usage: $0 [session-name] [new|attach|kill|list]"
        echo "Default: $0 vibe attach"
        ;;
esac
EOF
chmod +x ~/tmux-quick.sh

# Development environment creator
cat > ~/tmux-dev-env.sh << 'EOF'
#!/bin/bash
# Create a development environment

SESSION="dev"
PROJECT_DIR="${1:-$HOME/projects}"

# Kill existing session
tmux kill-session -t $SESSION 2>/dev/null

# Create new session with windows
tmux new-session -d -s $SESSION -n code
tmux send-keys -t $SESSION:code "cd $PROJECT_DIR" C-m
tmux send-keys -t $SESSION:code "clear" C-m

tmux new-window -t $SESSION -n git
tmux send-keys -t $SESSION:git "cd $PROJECT_DIR" C-m
tmux send-keys -t $SESSION:git "git status" C-m

tmux new-window -t $SESSION -n docker
tmux send-keys -t $SESSION:docker "docker ps" C-m

tmux new-window -t $SESSION -n logs
tmux send-keys -t $SESSION:logs "cd $PROJECT_DIR" C-m

# Select first window and attach
tmux select-window -t $SESSION:code
tmux attach -t $SESSION
EOF
chmod +x ~/tmux-dev-env.sh

# 5. Install tmux plugin manager (optional)
echo -e "\n${YELLOW}Installing tmux plugin manager...${NC}"
if [ ! -d ~/.tmux/plugins/tpm ]; then
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
    
    # Add plugin manager to config
    cat >> ~/.tmux.conf << 'EOF'

# tmux Plugin Manager
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

# Auto-save sessions
set -g @continuum-restore 'on'
set -g @continuum-save-interval '15'

# Initialize TMUX plugin manager
run '~/.tmux/plugins/tpm/tpm'
EOF
    echo -e "${GREEN}âœ“ Plugin manager installed${NC}"
else
    echo -e "${GREEN}âœ“ Plugin manager already installed${NC}"
fi

# 6. Create iPhone-specific helper
cat > ~/iphone-tmux.sh << 'EOF'
#!/bin/bash
# iPhone SSH helper script

echo "ðŸ“± iPhone tmux Quick Commands:"
echo "=============================="
echo "vibe     - Start/attach to main session"
echo "tl       - List all sessions"
echo "Ctrl+a d - Detach from session"
echo "Ctrl+a ? - Show all keybindings"
echo ""
echo "Window Management:"
echo "Ctrl+a c - New window"
echo "Ctrl+a n - Next window"
echo "Ctrl+a p - Previous window"
echo ""
echo "Pane Management:"
echo "Ctrl+a | - Split vertical"
echo "Ctrl+a - - Split horizontal"
echo "Ctrl+a z - Zoom pane"
echo ""

# Check for existing sessions
if tmux ls 2>/dev/null; then
    echo "Active sessions:"
    tmux ls
else
    echo "No active sessions. Type 'vibe' to start!"
fi
EOF
chmod +x ~/iphone-tmux.sh

# 7. Final setup
echo -e "\n${YELLOW}Finalizing setup...${NC}"

# Reload tmux config if tmux is running
if pgrep tmux > /dev/null; then
    tmux source-file ~/.tmux.conf 2>/dev/null || true
fi

# Source bashrc
source ~/.bashrc 2>/dev/null || true

# Display success message
echo -e "\n${GREEN}âœ… tmux Mobile Setup Complete!${NC}"
echo -e "${BLUE}================================${NC}"
echo ""
echo "Quick Start Commands:"
echo "  ${GREEN}vibe${NC}     - Start your main session"
echo "  ${GREEN}tl${NC}       - List all sessions"
echo "  ${GREEN}Ctrl+a d${NC} - Detach (keep session running)"
echo ""
echo "Created helper scripts:"
echo "  ~/tmux-quick.sh    - Session manager"
echo "  ~/tmux-dev-env.sh  - Dev environment"
echo "  ~/iphone-tmux.sh   - Quick reference"
echo ""
echo -e "${YELLOW}Tip: Run 'source ~/.bashrc' to load aliases${NC}"
echo -e "${YELLOW}     or logout and login again${NC}"
echo ""
echo -e "${GREEN}Happy mobile coding! ðŸ“±${NC}"